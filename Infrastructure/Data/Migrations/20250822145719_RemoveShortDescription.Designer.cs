// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250822145719_RemoveShortDescription")]
    partial class RemoveShortDescription
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("categories_pkey");

                    b.HasIndex(new[] { "Title" }, "uq_categories_title")
                        .IsUnique();

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Description", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("DescriptionPath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description_path");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.HasKey("Id")
                        .HasName("descriptions_pkey");

                    b.ToTable("descriptions", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Problem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("difficulty");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("problems_pkey");

                    b.ToTable("problems", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ProblemCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("ProblemId")
                        .HasColumnType("uuid")
                        .HasColumnName("problem_id");

                    b.HasKey("Id")
                        .HasName("problem_categories_pkey");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProblemId");

                    b.ToTable("problem_categories", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Submission", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Language")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("language")
                        .HasDefaultValueSql("'python'::character varying");

                    b.Property<int>("PassedTests")
                        .HasColumnType("integer")
                        .HasColumnName("passed_tests");

                    b.Property<int>("Points")
                        .HasColumnType("integer")
                        .HasColumnName("points");

                    b.Property<Guid>("ProblemId")
                        .HasColumnType("uuid")
                        .HasColumnName("problem_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("submissions_pkey");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "ProblemId", "UserId", "Language" }, "uq_submissions_language_problem_id_user_id")
                        .IsUnique();

                    b.ToTable("submissions", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Template", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Language")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("language")
                        .HasDefaultValueSql("'python'::character varying");

                    b.Property<Guid>("ProblemId")
                        .HasColumnType("uuid")
                        .HasColumnName("problem_id");

                    b.Property<string>("TemplatePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("template_path");

                    b.HasKey("Id")
                        .HasName("templates_pkey");

                    b.HasIndex(new[] { "ProblemId", "Language" }, "uq_templates_problem_id_language")
                        .IsUnique();

                    b.ToTable("templates", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Test", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Language")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("language")
                        .HasDefaultValueSql("'python'::character varying");

                    b.Property<int>("NumCases")
                        .HasColumnType("integer")
                        .HasColumnName("num_cases");

                    b.Property<Guid>("ProblemId")
                        .HasColumnType("uuid")
                        .HasColumnName("problem_id");

                    b.Property<string>("TestPath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("test_path");

                    b.HasKey("Id")
                        .HasName("tests_pkey");

                    b.HasIndex("ProblemId");

                    b.ToTable("tests", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password")
                        .HasComment("Hashed password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("user_pkey");

                    b.HasIndex(new[] { "Email" }, "uq_users_email")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "uq_users_username")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<int>("Points")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("points");

                    b.Property<string>("Rank")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("rank");

                    b.HasKey("Id")
                        .HasName("user_statuses_pkey");

                    b.ToTable("user_statuses", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Description", b =>
                {
                    b.HasOne("Domain.Entities.Problem", "IdNavigation")
                        .WithOne("Description")
                        .HasForeignKey("Domain.Entities.Description", "Id")
                        .IsRequired()
                        .HasConstraintName("descriptions_id_fkey");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("Domain.Entities.ProblemCategory", b =>
                {
                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("ProblemCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_problem_categories_category_id");

                    b.HasOne("Domain.Entities.Problem", "Problem")
                        .WithMany("ProblemCategories")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_problem_categories_problem_id");

                    b.Navigation("Category");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("Domain.Entities.Submission", b =>
                {
                    b.HasOne("Domain.Entities.Problem", "Problem")
                        .WithMany("Submissions")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_submissions_problem_id");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Submissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_submissions_user_id");

                    b.Navigation("Problem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Template", b =>
                {
                    b.HasOne("Domain.Entities.Problem", "Problem")
                        .WithMany("Templates")
                        .HasForeignKey("ProblemId")
                        .IsRequired()
                        .HasConstraintName("templates_problem_id_fkey");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("Domain.Entities.Test", b =>
                {
                    b.HasOne("Domain.Entities.Problem", "Problem")
                        .WithMany("Tests")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tests_problem");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("Domain.Entities.UserStatus", b =>
                {
                    b.HasOne("Domain.Entities.User", "IdNavigation")
                        .WithOne("UserStatus")
                        .HasForeignKey("Domain.Entities.UserStatus", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_statuses_user");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("ProblemCategories");
                });

            modelBuilder.Entity("Domain.Entities.Problem", b =>
                {
                    b.Navigation("Description");

                    b.Navigation("ProblemCategories");

                    b.Navigation("Submissions");

                    b.Navigation("Templates");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Submissions");

                    b.Navigation("UserStatus");
                });
#pragma warning restore 612, 618
        }
    }
}
